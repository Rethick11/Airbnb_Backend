generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum BookingStatus {
  PENDING
  CONFIRMED 
  COMPLETED
}

model Booking {
  id         Int              @id @default(autoincrement())
  userId     Int
  hotelId    Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  bookingAmount Int         
  status    BookingStatus     @default(PENDING)
  IdempotencyKey IdempotencyKey?
  idemkey     String              @unique
}

model IdempotencyKey {
  id        Int               @id @default(autoincrement())
  idemkey       String            @unique
  createdAt DateTime          @default(now())
  bookingId Int?              @unique
  booking  Booking?           @relation(fields: [bookingId], references: [id])
  finalized Boolean           @default(false)
}
 
 


// hotel model :)





model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]
}

model Room {
  id         Int      @id @default(autoincrement())
  hotelId    Int
  roomType   String
  basePrice  Decimal  @db.Decimal(10, 2)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  
  hotel      Hotel     @relation(fields: [hotelId], references: [id])
  availability RoomAvailability[]
}

model RoomAvailability {
  id          Int      @id @default(autoincrement())
  roomId      Int
  date        DateTime
  isBooked    Boolean  @default(false)
  bookingId   Int?     
  price       Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  
  room        Room     @relation(fields: [roomId], references: [id])

  @@unique([roomId, date]) // ensures one record per room per date
}